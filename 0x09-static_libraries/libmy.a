!<arch>
0-isupper.c/    0           0     0     644     201       `
#include "main.h"

/**
 *  _isupper - checks uppercase
 *  @c: parameter
 *  Return: 0 if sucessful
 */

int _isupper(int c)
{
	if (c >= 'A' && c < 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     475       `
#include "main.h"

/**
 *  _memset - fills memory with a constant byte.
 *  fills the first n bytes of the memory area pointed
 *  to by s with the constant b.
 *  @s: pointer to memory area.
 *  @b: constant to fill memory with.
 *  @n: bytes of the memory area to be filled.
 *  Return: pointer to memory area s.
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int counter;

	for (counter = 0; counter < n; counter++)
	{
		s[counter] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     407       `
#include "main.h"

/**
 *  _strcat - concatenates two strings,
 *  @dest: destination.
 *  @src: source.
 *  Return: the pointer to dest.
 */

char *_strcat(char *dest, char *src)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}
	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     641       `
#include <stdio.h>
#include "main.h"

/**
 *  _atoi - This function converts a string to an integer.
 *  @s: Pointer parameter
 *  Return: returns an integer value
 */

int _atoi(char *s)
{
		unsigned int count = 0, size = 0, j = 0, k = 1, m = 1, i;

		while (*(s + count) != '\0')
		{
			if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
				break;
			if (*(s + count) == '-')
				k *= -1;
			if ((*(s + count) >= '0') && (*(s + count) <= '9'))
			{
				if (size > 0)
					m *= 10;
				size++;
			}
			count++;
		}
		for (i = count - size; i < count; i++)
		{
			j = j + ((*(s + i) - 48) * m);
			m /= 10;
		}
		return (j * k);
}

1-isdigit.c/    0           0     0     644     211       `
#include <stdio.h>
#include "main.h"

/**
 *  _isdigit - checks for digits
 *  @c: parameter
 *  Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= 48 && c < 58)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     361       `
#include "main.h"

/**
 * char *_memcpy - copies n bytes from memory area src to memory area dest
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int size = n;

	if (size > 0)
	{
		int i;

		for (i = 0; i < size; i++)
			dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     480       `
#include "main.h"

/**
 *  _strncat - concatenates two strings,
 *  @dest: destination.
 *  @src: source.
 *  @n: print amount of bytes used from src.
 *  Return: the pointer to destination
 */

char *_strncat(char *dest, char *src, int n)
{
		int count = 0, count2 = 0;

		while (*(dest + count) != '\0')
		{
			count++;
		}
		while (count2 < n)
		{
			*(dest + count) = *(src + count2);
			if (*(src + count2) == '\0')
				break;
			count++;
			count2++;
		}
		return (dest);
}
2-strchr.c/     0           0     0     644     363       `
#include "main.h"
#define NULL 0

/**
 * _strchr - locate 1st occurrence of char in string and returns pointer there
 * @s: string to search
 * @c: target characer
 * Return: pointer to that character in string
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0' && s[i] != c)
		i++;
	if (s[i] == c)
		return (&s[i]);
	else
		return (NULL);
}

2-strlen.c/     0           0     0     644     281       `
#include <stdio.h>
#include "main.h"

/**
 *  _strlen - Function for counting the length of string
 *  @s: a pointer for counting the strting lenth
 *  Author: Sammykingx
 *  Return: int i
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}

2-strncpy.c/    0           0     0     644     350       `
#include "main.h"

/**
 *  _strncpy - copies a string
 *  @dest: destination.
 *  @src: source.
 *  @n: amount of bytes from src.
 *  Return: the pointer to dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
		int i;

		for (i = 0; i < n && src[i] != '\0'; i++)
			dest[i] = src[i];
		for ( ; i < n; i++)
			dest[i] = '\0';
		return (dest);
}
3-islower.c/    0           0     0     644     226       `
#include "main.h"

/**
 *  _islower - prints 1 or 0 depending on input
 *  @c: first parameter
 *  Description: prints all lowercase letters
 *  Return: Always(0).
 */

int _islower(int c)
{
		return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     237       `
#include "main.h"

/**
 *  _puts - prints a string to stdout
 *  @str: pointer parameter
 *  Author: sammykingx
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;									}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     376       `
#include "main.h"

/**
 *  _strcmp - compares two strings
 *  @s1: first string.
 *  @s2: second string.
 *  Return: 0 if s1 and s2 are equals,
 *  another number if not.
 */

int _strcmp(char *s1, char *s2)
{
		int i = 0, op = 0;

		while (op == 0)
		{
			if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
				break;
			op = *(s1 + i) - *(s2 + i);
			i++;
		}
		return (op);
}
3-strspn.c/     0           0     0     644     569       `
#include "main.h"

/**
 * _strspn - return length of string that matches values consistently
 * @s: string to search
 * @accept: target matches
 * Return: number of bytes consecutively matched
 */

unsigned int _strspn(char *s, char *accept)
{
	int i = 0, j;
	int matches = 0;

	while (s[i] != '\0') /*iterate through string*/
	{
		for (j = 0; accept[j] != '\0'; j++) /*iterate through target*/
		{
			if (s[i] == accept[j])
			{
				matches++;
				break;
			}
			if (accept[j + 1] == '\0' && s[i] != accept[j])
				return (matches);
		}
		i++;
	}
	return (matches);
}

4-isalpha.c/    0           0     0     644     295       `
#include "main.h"
/**
 * _isalpha - Check if character is a alphabet character.
 * @c: type int character
 *  Return: 1 if letter, lowercase or uppercase, and 0 otherwise
 */

int _isalpha(int c)
{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
			return (1);

		else
				return (0);
}

4-strpbrk.c/    0           0     0     644     445       `
#include "main.h"
#define NULL 0

/**
 * _strpbrk - return pointer to byte in s that matches a byte in accept
 * @s: string to search
 * @accept: target matches
 * Return: pointer to index of string at first occurence
 */

char *_strpbrk(char *s, char *accept)
{
	int x = 0, y;

	while (s[x] != '\0')
	{
		for (y = 0; accept[y] != '\0'; y++)
		{
			if (s[x] == accept[y])
			{
				s = &s[x];
				return (s);
			}
		}
		x++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     663       `
#include "main.h"
#define NULL 0

/**
 * _strstr - locate and return pointer to first occurence of substring
 * @haystack: string to search
 * @needle: target substring to search for
 * Return: pointer to index of string at first occurence of whole substring
 */

char *_strstr(char *haystack, char *needle)
{
	int i = 0, j, x;

	if (needle[0] == '\0')
		return (haystack);
	while (haystack[i] != '\0')
	{
		if (haystack[i] == needle[0])
		{
			x = i, j = 0;
			while (needle[j] != '\0')
			{
				if (haystack[x] == needle[j])
					x++, j++;
				else
					break;
			}
			if (needle[j] == '\0')
			{
				return (haystack + i);
			}
		}
		i++;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     225       `
#include "main.h"

/**
 * _abs - compute the absolute value of an integer
 * @n: int type number
 * Return: absolute value of @n
 */

int _abs(int n)
{
		if (n < 0)
		{
			return (n * -1);
		}
		else
		{
			return (n);
		}
}

9-strcpy.c/     0           0     0     644     373       `
#include <stdio.h>
#include "main.h"

/**
 *  _strcpy - This function copies a string pointed to src and dest
 *  @dest: poiter parameter
 *  @src: poiter parameter
 *  Author:Onyishi Chetachi
 *  Return: char
 */

char *_strcpy(char *dest, char *src)
{
		int i;

		for (i = 0; *(src + i) != '\0'; i++)
		{
			dest[i] = *(src + i);
		}
		dest[i] = '\0';
		return (dest);
}

_putchar.c/     0           0     0     644     188       `
#include "main.h"

/**
 *  _isupper - checks uppercase
 *  @c: parameter
 *  Return: 0 if sucessful
 */

int _isupper(int c)
{
	if (c >= 65 && c < 91)
		return (1);
	else
		return (0);
}

